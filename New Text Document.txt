Dockerfile

Dockerfile is a declarative way of creating our own images.
Docker will give us some syntax to create our own images

1. FROM:

FROM almalinux

Building an image from the dockerfile:
--------------------------------------------------------

command syntax : 

docker build -t [docker-hub-url]/your user name/your image name:version . (dot . ) is compulsory

docker hub url is docker.io

but   need to provide the docker hub url and username also but official images does not have usernames but if we want to pull images with our dockerhub username it is our wish


Note to build  image from the docker file using docker build command,  with user name is not mandatory but if you want to push the image without username it is not possible in that case you need to tag the image then you need to push to docker hub 


Example :

A Dockerfile is there in your local system

you build the image by giving the command "  docker build -t from:v1 " 

Then docker image is created and it is reflected by typing the command " docker images "

The output is similar to :


REPOSITORY                      TAG                       IMAGE ID       CREATED         SIZE
from                            v1                        3c6f0510f311   15 hours ago    184MB


for example if  your docker hub username is xyz and if you wish to push to dockerhub then the command would be " docker push xyz/from:v1 "

but this throwing error like this :  " The push refers to repository [docker.io/xyz/from]
An image does not exist locally with the tag: xyz/from  "


In order to push this image to your docker hub then you need to tag the image like this :  "  docker tag <image ID > xyz/from:v1 "

xyz  = docker-hub username

from:v1 = image with the version 


===========================================================================



RUN Command:
---------------------


RUN instruction we use to install softwares, Packages, and other tasks. It runs at the time of image building



===========================================


CMD is the instruction that runs the container

RUN vs CMD

RUN command will execute at the time of image creation

CMD command will execute at the time of running container.

In a Dockerfile, both the RUN and CMD commands are used to execute instructions within a Docker container, but they serve different purposes.

RUN Command:
The RUN command is used to execute commands during the build process of a Docker image. Each RUN instruction creates a new layer in the image. These instructions are typically used to install dependencies, configure the environment, and perform other build-time tasks.

Here's an example:

FROM ubuntu:latest

RUN apt-get update && apt-get install -y \
    package1 \
    package2

In the above example, the RUN command is used to update the package lists and install package1 and package2 during the image build.

CMD Command:
The CMD command is used to provide default commands or instructions to be executed when a Docker container based on the image is run. There can be only one CMD instruction in a Dockerfile, and if multiple CMD instructions are specified, only the last one will be effective.

Here's an example:

FROM ubuntu:latest

RUN apt-get update && apt-get install -y package1

CMD ["echo", "Hello, Docker!"]


In the above example, the CMD instruction specifies that the command echo "Hello, Docker!" should be executed when a container is run using the image. This will be the default command executed unless overridden by the user during container startup.


To run the above container and see the output, you would use the docker run command:

$ docker run <image_name>


In this case, it would output:
Hello, Docker!


Note that the CMD instruction can be overridden by passing a command as an argument when running the container. For example:

$ docker run <image_name> echo "Overridden command"


$ docker run <image_name> echo "Overridden command"


In this case, the output would be:

Overridden command


To summarize, the RUN command is used during the image build process to execute instructions and create new image layers, while the CMD command specifies the default command to be executed when running a container based on the image.

Few Examples:


FROM python:3.9

COPY script.py /app/

CMD ["python", "/app/script.py"]


In this example, the Dockerfile specifies a Python base image and copies a script named script.py into the /app/ directory inside the container. The CMD instruction then sets the default command to execute the script using the Python interpreter.


Running a Web Server:

FROM nginx:latest

COPY index.html /usr/share/nginx/html/

CMD ["nginx", "-g", "daemon off;"]


In this case, the Dockerfile is based on the official NGINX image. It copies an index.html file into the /usr/share/nginx/html/ directory, which serves as the default HTML content for the web server. The CMD instruction starts the NGINX server and keeps it running in the foreground using the "daemon off;" option.


Setting Environment Variables:


FROM ubuntu:latest

ENV MY_VAR=my_value

CMD ["echo", "$MY_VAR"]



Here, the Dockerfile sets an environment variable MY_VAR with the value "my_value". The CMD instruction uses echo to print the value of MY_VAR. The $MY_VAR syntax is used to reference the environment variable within the Dockerfile.



Running a Custom Command:

FROM ubuntu:latest

CMD ["/bin/bash", "-c", "echo 'Hello, Docker!' && echo 'Goodbye, Docker!'"]



In this example, the CMD instruction uses /bin/bash as the command interpreter (-c flag) and provides a sequence of commands to execute within the container. Here, it prints both "Hello, Docker!" and "Goodbye, Docker!".

Remember that the CMD instruction provides the default command when running the container. It can be overridden by passing a different command as an argument when using the docker run command.

==========================================

after installing nginx

docker exec -it <image id > bash


cd /usr/share/nginx/html

docker start 78c1bd45c862



========================================


LABEL :

LABEL instruction is used to give some metadata information.

docker inspect <image id>

 to filter the docker images based on the label:

 docker images --filter "label=AUTHOR=Siva Krishna" (In the docker file we have to give labels that value we should give here)

Note : While giving the labels the left ones are in capital letters for example here in this case the AUTHORshould be in the capital letters

=======================================================================================


EXPOSE:

EXPOSE instruction is useful to tell the users of the image about the ports and protocols image/containers 
is opening.

It will not have any functionality, It is used only to tell the information

You can see what ports are exposed in the docker inspect <imade id>

as well as docker ps comand to list all containers and the exposed port/protocols

===============================================================


ENV:

ENV is the instruction to provide the environmental variables to image and container.


To overide the env variable at run time  we can give like this :

docker run -e AUTHOR=krishna env:v1 env
=================================================================================

COPY:

COPY instruction is useful to copy the files from local to image.


==========================================================================


ADD:

ADD is same as copy it is useful to copy fils from local to container. BUT it has 2 extra capabilities


1. ADD can download the file directly from the internet to the container
2. ADD can untar/unzip the file directly in to the computer.

===================================================


ENTRYPOINT:

ENTRYPOINT is also used to run the container just like CMD. But there are few differences.
1. We cant override ENTRYPOINT, but we can override CMD.

2. We cant override ENTRYPOINT, If you try to do so it will go and append to the ENTRYPOINT command

3. If you use CMD and ENTRYPOINT  and dont give any command from termnal, CMD acts as argument provider to ENTRYPOINT.

4. CMD will supply default arguments to ENTRYPOINT.

5. You can always override CMD arguments from runtime

6. you can stop misusing youtr image with other commands.

===================================================================


USER :

It is used to run the commands as particular user.

=====================

WORKDIR:

WORKDIR is used to set the path to the image while creating


===============================================


    ARG:

    ARG is used to supply few variables at the image creation.

    ARG is the only instruction you can use  before FROM . 

    ARG declaRed before cant be accessed after FROM.

    ### for best results use ENV and ARG together

    * create one env variable andd assign the value of ARG to that

    * Then we can access ARG values through ENV both in image and container.

    ===============================================

    ONBUILD:

    ONBUILD is useed to set some hard guidelines to the image

    We can control how others can use our image as their bas image.

    
    












